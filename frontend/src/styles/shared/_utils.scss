/**
 * Copyright (C) 2017 Linagora
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

@import './_colors';

.width-full {
  width: 100%;
}

.text-center {
  text-align: center;
}

.color-primary {
  color: mat-color($primary);
}

.color-accent {
  color: mat-color($accent);
}

.bold {
  font-weight: bold;
}

.light-bold {
  font-weight: 500;
}

.hidden {
  display: none;
}

.color-primary-light-bold {
  @extend .color-primary;
  @extend .light-bold;
}
.color-accent-light-bold {
  @extend .color-accent;
  @extend .light-bold;
}

.color-primary-bold {
  @extend .color-primary;
  @extend .bold;
}

.color-accent-bold {
  @extend .color-accent;
  @extend .bold;
}

// ---------------------------------------------------------------

// generate padding and margin according to directions + px
$sizes: (x0: 0, x1: 10, x2: 20, x3: 30, x4: 40);
$directions: '', '-left', '-right', '-top', '-bottom';

@each $keySize, $valueSize in $sizes {
  @each $dir in $directions {
    .padding#{$dir}-#{$keySize} {
      padding#{$dir}: #{$valueSize}px !important;
    }

    .margin#{$dir}-#{$keySize} {
      margin#{$dir}: #{$valueSize}px !important;
    }

    .margin#{$dir}-#{$keySize}-no-last:not(:last-child) {
      margin#{$dir}: #{$valueSize}px !important;
    }
  }
}

// ---------------------------------------------------------------

// generate the color palette
@mixin generate-colors($name, $colorHexa, $index, $lightOrDark) {
  // @debug ".color-#{$name}-x#{$index}";
  // $darkenOrLightenAndIndex: "";
  // $lightOrDark: "-#{$lightOrDark}";

  // @if $index == 0 {
  //   $darkenOrLightenAndIndex: "";
  // } @else {
  //   $darkenOrLightenAndIndex: "-x#{$index}";
  // }

  // .color-#{$name}-x#{$index} {
  //   color: lighten($colorHexa, 10 * $index);
  // }

  // .background-color-#{$name}-x#{$index} {
  //   background-color: lighten($colorHexa, 10 * $index);
  // }

  // .border-color-#{$name}-x#{$index} {
  //   border-color: lighten($colorHexa, 10 * $index);
  // }

  // .background-color-hover-#{$name}-x#{$index}:hover {
  //   background-color: lighten($colorHexa, 10 * $index);
  // }

  .color-#{$name}-x#{$index} {
    color: lighten($colorHexa, 10 * $index);
  }

  .background-color-#{$name}-x#{$index} {
    background-color: lighten($colorHexa, 10 * $index);
  }

  .border-color-#{$name}-x#{$index} {
    border-color: lighten($colorHexa, 10 * $index);
  }

  .background-color-hover-#{$name}-x#{$index}:hover {
    background-color: lighten($colorHexa, 10 * $index);
  }
}

@each $colorName, $colorHexa in $color-palette {
  @for $indexColor from 1 through $color-declination {
    @include generate-colors($colorName, $colorHexa, $indexColor, "");
    //   @include generate-colors($colorName, $colorHexa, $indexColor, "light");
    //   @include generate-colors($colorName, $colorHexa, $indexColor, "dark");
  }
}
